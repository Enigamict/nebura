// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package nebura

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadXdpProg returns the embedded CollectionSpec for XdpProg.
func LoadXdpProg() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XdpProgBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load XdpProg: %w", err)
	}

	return spec, err
}

// LoadXdpProgObjects loads XdpProg and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*XdpProgObjects
//	*XdpProgPrograms
//	*XdpProgMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadXdpProgObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadXdpProg()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// XdpProgSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XdpProgSpecs struct {
	XdpProgProgramSpecs
	XdpProgMapSpecs
}

// XdpProgSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XdpProgProgramSpecs struct {
	XdpDrop *ebpf.ProgramSpec `ebpf:"xdp_drop"`
}

// XdpProgMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XdpProgMapSpecs struct {
}

// XdpProgObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadXdpProgObjects or ebpf.CollectionSpec.LoadAndAssign.
type XdpProgObjects struct {
	XdpProgPrograms
	XdpProgMaps
}

func (o *XdpProgObjects) Close() error {
	return _XdpProgClose(
		&o.XdpProgPrograms,
		&o.XdpProgMaps,
	)
}

// XdpProgMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadXdpProgObjects or ebpf.CollectionSpec.LoadAndAssign.
type XdpProgMaps struct {
}

func (m *XdpProgMaps) Close() error {
	return _XdpProgClose()
}

// XdpProgPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadXdpProgObjects or ebpf.CollectionSpec.LoadAndAssign.
type XdpProgPrograms struct {
	XdpDrop *ebpf.Program `ebpf:"xdp_drop"`
}

func (p *XdpProgPrograms) Close() error {
	return _XdpProgClose(
		p.XdpDrop,
	)
}

func _XdpProgClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdpprog_bpfel.o
var _XdpProgBytes []byte
